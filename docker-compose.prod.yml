version: '3.8'

services:
  # Frontend React - Service Web
  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile.render
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://metresurmesureenligne.onrender.com/api
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: unless-stopped

  # Backend Node.js - Service API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.render
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=metresurmesure
      - DB_USER=metresuser
      - DB_PASSWORD=mpbw idqt fnbt wwbaz
      - JWT_SECRET=02a1cc8cfba732c5df138a76f718c2c5685994399a0d735c0f45ff0a441bd0abfc2fe67d133c2562733e2b2a622e2bea03c12bef3d133f0de53a2843fcdf9a72
      - FRONTEND_URL=https://metresurmesureenligne.onrender.com
      - STRIPE_SECRET_KEY=sk_live_votre_cl√©_stripe_production
      - EMAIL_SERVICE=gmail
      - EMAIL_USER=arvelandrianantoandro@gmail.com
      - EMAIL_PASS=mpbw idqt fnbt wwba
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL - Service Database
  postgres:
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_DB: metresurmesure
      POSTGRES_USER: metresuser
      POSTGRES_PASSWORD: mpbw idqt fnbt wwbaz
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: